{"version":3,"sources":["Comps/reducer.jsx","StyleComp/TodoOutputClass.jsx","Comps/TodoOutput.jsx","StyleComp/TodoGeneratorClass.jsx","Comps/TodoGenerator.jsx","Comps/Header.jsx","Comps/Todo.jsx"],"names":["reducer","state","action","type","todo","title","value","id","Date","getTime","toString","state_todo","isEdit","new_todo_arr","todo_arr","map","element","new_todo","filter","complete","new_title","TodoOutputClass","styled","section","TodoOutput","props","dispatch","list","style","textDecoration","background","onClick","e","Button","className","Edit","TodoGeneratorClass","TodoGenerator","htmlFor","visibility","width","height","name","autoComplete","placeholder","maxLength","onChange","target","Header","default_state","localStorage","getItem","JSON","parse","Todo","useReducer","useEffect","setItem","stringify"],"mappings":"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","file":"static/js/4.234f860f.chunk.js","sourcesContent":["export default function reducer(state, action) {\r\n    if (action.type === 'handleChange') {\r\n        return {\r\n            ...state,\r\n            todo: { ...state.todo, title: action.value },\r\n        };\r\n    }\r\n    if (action.type === 'generateTodo') {\r\n        let id = new Date().getTime().toString();\r\n        let state_todo = { ...state.todo, id };\r\n        if (!state.todo.title) {\r\n            return { ...state };\r\n        } else if (state.todo.title && state.todo.isEdit) {\r\n            let new_todo_arr = state.todo_arr.map((element) => {\r\n                if (element.id === state.todo.id) {\r\n                    return {\r\n                        ...element,\r\n                        title: state.todo.title,\r\n                    };\r\n                } else {\r\n                    return { ...element };\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                todo: { ...state.todo, isEdit: false, title: '' },\r\n                todo_arr: new_todo_arr,\r\n            };\r\n        }\r\n        return {\r\n            ...state,\r\n            todo_arr: [state_todo, ...state.todo_arr],\r\n        };\r\n    }\r\n    if (action.type === 'empty') {\r\n        let name = '';\r\n        return {\r\n            ...state,\r\n            todo: { ...state.todo, title: name },\r\n        };\r\n    }\r\n    if (action.type === 'deleteTodo') {\r\n        let new_todo = state.todo_arr.filter((todo) => {\r\n            return todo.id !== action.id;\r\n        });\r\n        return {\r\n            ...state,\r\n            todo_arr: new_todo,\r\n        };\r\n    }\r\n    if (action.type === 'toggleComplete') {\r\n        let new_todo_arr = state.todo_arr.map((todo) => {\r\n            if (todo.id === action.id) {\r\n                return {\r\n                    ...todo,\r\n                    complete: !todo.complete,\r\n                };\r\n            } else {\r\n                return { ...todo };\r\n            }\r\n        });\r\n        return {\r\n            ...state,\r\n            todo_arr: new_todo_arr,\r\n        };\r\n    }\r\n    if (action.type === 'editTodo') {\r\n        let new_title = action.value;\r\n        if (state.todo.title) {\r\n            return {\r\n                ...state,\r\n                todo: { ...state.todo, title: '' ,isEdit:false},\r\n            };\r\n        }\r\n        return {\r\n            ...state,\r\n            todo: {\r\n                ...state.todo,\r\n                title: new_title,\r\n                isEdit: true,\r\n                id: action.id,\r\n            },\r\n        };\r\n    }\r\n}","import styled from 'styled-components';\r\n\r\nconst TodoOutputClass = styled.section`\r\n    width: clamp(40rem, 40vw, 60rem);\r\n    margin: 0 auto;\r\n    & div {\r\n        /* border: 1px solid red; */\r\n        display: flex;\r\n        transition: 0.25s;\r\n        color: var(--main-h1-clr);\r\n        margin: 1.5rem;\r\n        &:hover {\r\n            transform: scale(1.1);\r\n        }\r\n        &:hover h2,\r\n        &:hover button {\r\n            box-shadow: 0.5rem 0.5rem 1rem rgba(0, 0, 0, 0.2);\r\n        }\r\n        &:hover h2{\r\n            background: rgb(0, 255, 242);\r\n        }\r\n        & h2 {\r\n            box-shadow: 0.2rem 0.2rem 1rem rgba(0, 0, 0, 0.2);\r\n            flex: 1;\r\n            background: var(--todo-list-bg-clr);\r\n            border-radius: 0.3rem;\r\n            /* height: clamp(3rem, 3.8rem, 4vw); */\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            color: var(--main-h1-clr);\r\n            font-weight: normal;\r\n            font-size: clamp(1.8rem, 2rem, 3vw);\r\n            position:relative;\r\n            overflow:hidden;\r\n            transition:0.25s;\r\n            &:before{\r\n                content:'';\r\n                position:absolute;\r\n                height:100%;\r\n                width:0.3rem;\r\n                background:rgb(255, 255, 255);\r\n                left:0;\r\n            }\r\n        }\r\n        & .edit-btn{\r\n            background:var(--create-btn-bg-clr);\r\n            &:hover{\r\n                color:var(--create-btn-bg-clr);\r\n            }\r\n        }\r\n        & button {\r\n            margin-left: 1rem;\r\n            box-shadow: 0.2rem 0.2rem 1rem rgba(0, 0, 0, 0.1);\r\n            background: var(--delete-btn-clr);\r\n            & svg {\r\n                font-size: clamp(1.5rem, 2rem, 4vw);\r\n            }\r\n            &:hover {\r\n                color: var(--delete-btn-hover-clr);\r\n                background: var(--create-btn-hover-bg-clr);\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default TodoOutputClass;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Delete from '@material-ui/icons/Delete';\r\nimport { Edit } from '@material-ui/icons';\r\nimport TodoOutputClass from '../StyleComp/TodoOutputClass';\r\n\r\nconst TodoOutput = (props) => {\r\n    const { todo_arr, dispatch } = props;\r\n    return (\r\n        <TodoOutputClass>\r\n            {todo_arr.map((list) => {\r\n                return (\r\n                    <div\r\n                        key={list.id}\r\n                        style={{\r\n                            textDecoration: list.complete\r\n                                ? 'line-through'\r\n                                : null,\r\n                        }}\r\n                    >\r\n                        <h2\r\n                            style={{\r\n                                background: list.complete\r\n                                    ? 'rgb(158, 10, 47)'\r\n                                    : null,\r\n                            }}\r\n                            onClick={(e) => {\r\n                                // console.log(e);\r\n                                dispatch({\r\n                                    type: 'toggleComplete',\r\n                                    id: list.id,\r\n                                });\r\n                            }}\r\n                        >\r\n                            {list.title}\r\n                        </h2>\r\n                        <Button\r\n                            style={{\r\n                                background: list.complete\r\n                                    ? 'rgb(158,10,47)'\r\n                                    : null,\r\n                            }}\r\n                            className=\"edit-btn\"\r\n                            title=\"edit todo\"\r\n                            onClick={() =>\r\n                                dispatch({\r\n                                    type: 'editTodo',\r\n                                    id: list.id,\r\n                                    value: list.title,\r\n                                })\r\n                            }\r\n                        >\r\n                            <Edit />\r\n                        </Button>\r\n                        <Button\r\n                            style={{\r\n                                background: list.complete\r\n                                    ? 'rgb(158,10,47)'\r\n                                    : null,\r\n                            }}\r\n                            title=\"delete todo\"\r\n                            onClick={() =>\r\n                                dispatch({\r\n                                    type: 'deleteTodo',\r\n                                    id: list.id,\r\n                                })\r\n                            }\r\n                        >\r\n                            <Delete />\r\n                        </Button>\r\n                    </div>\r\n                );\r\n            })}\r\n        </TodoOutputClass>\r\n    );\r\n};\r\n\r\nexport default TodoOutput;\r\n","import styled from 'styled-components';\r\n\r\nconst TodoGeneratorClass = styled.section`\r\n    width: clamp(30rem, 60rem, 60vw);\r\n    margin: 3rem auto;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    & label {\r\n        visibility: hidden;\r\n    }\r\n    & input {\r\n        background: var(--input-bg-clr);\r\n        font-size: clamp(1.6rem, 2.5rem, 2.8vw);\r\n        flex: 1;\r\n        font-weight: 200;\r\n        letter-spacing: 0.1rem;\r\n        text-align: center;\r\n        border-radius: 0.3rem;\r\n        padding: 0.2rem 0;\r\n        height: clamp(4rem, 4.5rem, 4vw);\r\n        transition: 0.25s;\r\n        &:focus-within {\r\n            background: var(--focused-input-bg-clr);\r\n            box-shadow: 0.5rem 0.5rem 1rem rgba(0, 0, 0, 0.5);\r\n        }\r\n    }\r\n    & button {\r\n        background: var(--create-btn-bg-clr);\r\n        /* height: clamp(3rem, 3.8rem, 4vw); */\r\n        height: clamp(4rem, 4.5rem, 4vw);\r\n        margin-left: 0.5rem;\r\n        transition: 0.25s;\r\n        box-shadow: 0.2rem 0.2rem 1rem rgba(0, 0, 0, 0.1);\r\n        & svg {\r\n            font-size: clamp(2rem, 3rem, 4vw);\r\n        }\r\n        &:hover {\r\n            transform: scale(1.1);\r\n            box-shadow: 0.5rem 0.5rem 1rem rgba(0, 0, 0, 0.2);\r\n            color: var(--create-btn-bg-clr);\r\n            background: var(--create-btn-hover-bg-clr);\r\n        }\r\n    }\r\n`;\r\n\r\nexport default TodoGeneratorClass;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Add from '@material-ui/icons/Add';\r\nimport { Edit } from '@material-ui/icons';\r\nimport TodoGeneratorClass from '../StyleComp/TodoGeneratorClass';\r\n\r\nconst TodoGenerator = (props) => {\r\n    const { todo, dispatch, todo_arr } = props;\r\n    return (\r\n        <TodoGeneratorClass>\r\n            <label\r\n                htmlFor=\"input\"\r\n                style={{\r\n                    visibility: 'hidden',\r\n                    width: '0',\r\n                    height: '0',\r\n                }}\r\n            >\r\n                input\r\n            </label>\r\n            <input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                id=\"input\"\r\n                value={todo.title}\r\n                autoComplete=\"off\"\r\n                placeholder=\"make a new todo... ✏️\"\r\n                maxLength=\"30\"\r\n                onChange={(e) =>\r\n                    dispatch({\r\n                        type: 'handleChange',\r\n                        value: e.target.value,\r\n                    })\r\n                }\r\n            />\r\n            {todo.isEdit ? (\r\n                <Button\r\n                    title=\"save changes\"\r\n                    onClick={() => dispatch({ type: 'generateTodo' })}\r\n                >\r\n                    <Edit />\r\n                </Button>\r\n            ) : (\r\n                <Button\r\n                    title=\"create todo\"\r\n                    onClick={() => {\r\n                        dispatch({ type: 'generateTodo' });\r\n                        dispatch({ type: 'empty' });\r\n                    }}\r\n                >\r\n                    <Add />\r\n                </Button>\r\n            )}\r\n            {/* <h2> todos left : {todo_arr.filter((todo) => !todo.complete).length}</h2> */}\r\n        </TodoGeneratorClass>\r\n    );\r\n};\r\n\r\nexport default TodoGenerator;\r\n","export default function Header() {\r\n    return (\r\n        <header>\r\n            <h1>Simple Todo App</h1>\r\n        </header>\r\n    );\r\n}\r\n","import React, { useEffect, useReducer } from 'react';\r\nimport reducer from './reducer';\r\nimport TodoOutput from './TodoOutput';\r\nimport TodoGenerator from './TodoGenerator';\r\nimport Header from './Header';\r\n\r\nfunction SAVE_TO_LOCAL_STORAGE() {\r\n    let todos;\r\n    if (localStorage.getItem('todo')) {\r\n        return (todos = JSON.parse(localStorage.getItem('todo')));\r\n    } else {\r\n        return (todos = []);\r\n    }\r\n}\r\n\r\nconst default_state = {\r\n    todo: {\r\n        id: '',\r\n        title: '',\r\n        complete: false,\r\n        isEdit: false,\r\n    },\r\n    todo_arr: SAVE_TO_LOCAL_STORAGE(),\r\n};\r\nconst Todo = () => {\r\n    const [state, dispatch] = useReducer(reducer, default_state);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todo', JSON.stringify(state.todo_arr));\r\n    }, [state.todo_arr]);\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <main>\r\n                <TodoGenerator\r\n                    todo={state.todo}\r\n                    dispatch={dispatch}\r\n                    todo_arr={state.todo_arr}\r\n                />\r\n                <TodoOutput todo_arr={state.todo_arr} dispatch={dispatch} />\r\n            </main>\r\n        </>\r\n    );\r\n};\r\nexport default Todo;\r\n"],"sourceRoot":""}