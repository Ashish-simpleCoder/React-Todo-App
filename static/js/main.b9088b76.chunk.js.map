{"version":3,"sources":["Comps/reducer.jsx","StyleComp/TodoGeneratorClass.jsx","StyleComp/TodoOutputClass.jsx","Comps/Todo.jsx","Comps/App.js","StyleComp/GlobelStyle.jsx","index.js"],"names":["reducer","state","action","type","todo","title","value","id","Date","getTime","toString","state_todo","isEdit","new_todo_arr","todo_arr","map","element","new_todo","filter","complete","new_title","TodoGeneratorClass","styled","section","TodoOutputClass","default_state","localStorage","getItem","JSON","parse","Todo","useReducer","dispatch","useEffect","setItem","stringify","todo_text","useRef","htmlFor","style","visibility","width","height","name","autoComplete","placeholder","onChange","e","target","Button","onClick","Edit","ref","list","textDecoration","console","log","className","App","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"qNAAe,SAASA,EAAQC,EAAOC,GACnC,GAAoB,iBAAhBA,EAAOC,KACP,OAAO,2BACAF,GADP,IAEIG,KAAK,2BAAMH,EAAMG,MAAb,IAAmBC,MAAOH,EAAOI,UAG7C,GAAoB,iBAAhBJ,EAAOC,KAAyB,CAChC,IAAII,GAAK,IAAIC,MAAOC,UAAUC,WAC1BC,EAAU,2BAAQV,EAAMG,MAAd,IAAoBG,OAClC,IAAKN,EAAMG,KAAKC,MACZ,OAAO,eAAKJ,GACT,GAAIA,EAAMG,KAAKC,OAASJ,EAAMG,KAAKQ,OAAQ,CAC9C,IAAIC,EAAeZ,EAAMa,SAASC,KAAI,SAACC,GACnC,OAAIA,EAAQT,KAAON,EAAMG,KAAKG,GACnB,2BACAS,GADP,IAEIX,MAAOJ,EAAMG,KAAKC,QAGf,eAAKW,MAGpB,OAAO,2BACAf,GADP,IAEIG,KAAK,2BAAMH,EAAMG,MAAb,IAAmBQ,QAAQ,EAAOP,MAAO,KAC7CS,SAAUD,IAGlB,OAAO,2BACAZ,GADP,IAEIa,SAAS,CAAEH,GAAH,mBAAkBV,EAAMa,aAGxC,GAAoB,UAAhBZ,EAAOC,KAAkB,CAEzB,OAAO,2BACAF,GADP,IAEIG,KAAK,2BAAMH,EAAMG,MAAb,IAAmBC,MAHhB,OAMf,GAAoB,eAAhBH,EAAOC,KAAuB,CAC9B,IAAIc,EAAWhB,EAAMa,SAASI,QAAO,SAACd,GAClC,OAAOA,EAAKG,KAAOL,EAAOK,MAE9B,OAAO,2BACAN,GADP,IAEIa,SAAUG,IAGlB,GAAoB,mBAAhBf,EAAOC,KAA2B,CAClC,IAAIU,EAAeZ,EAAMa,SAASC,KAAI,SAACX,GACnC,OAAIA,EAAKG,KAAOL,EAAOK,GACZ,2BACAH,GADP,IAEIe,UAAWf,EAAKe,WAGb,eAAKf,MAGpB,OAAO,2BACAH,GADP,IAEIa,SAAUD,IAGlB,GAAoB,aAAhBX,EAAOC,KAAqB,CAC5B,IAAIiB,EAAYlB,EAAOI,MACvB,OAAIL,EAAMG,KAAKC,MACJ,2BACAJ,GADP,IAEIG,KAAK,2BAAMH,EAAMG,MAAb,IAAmBC,MAAO,GAAIO,QAAO,MAG1C,2BACAX,GADP,IAEIG,KAAK,2BACEH,EAAMG,MADT,IAEAC,MAAOe,EACPR,QAAQ,EACRL,GAAIL,EAAOK,Q,wBClCZc,EA5CYC,IAAOC,QAAV,mvCCkDTC,EAlDSF,IAAOC,QAAV,+9C,eCoBrB,I,EAAME,EAAgB,CAClBrB,KAAM,CACFG,GAAI,GACJF,MAAO,GACPc,UAAU,EACVP,QAAQ,GAEZE,SAdIY,aAAaC,QAAQ,QACLC,KAAKC,MAAMH,aAAaC,QAAQ,SAEhC,IAgITG,EAlHF,WACT,MAA0BC,qBAAW/B,EAASyB,GAA9C,mBAAOxB,EAAP,KAAc+B,EAAd,KAEAC,qBAAU,WACNP,aAAaQ,QAAQ,OAAQN,KAAKO,UAAUlC,EAAMa,aACnD,CAACb,EAAMa,WAEV,IAAMsB,EAAYC,iBAAO,MAEzB,OACI,qCACI,iCACI,mDAEJ,iCACI,eAAC,EAAD,WACI,uBACIC,QAAQ,QACRC,MAAO,CACHC,WAAY,SACZC,MAAO,IACPC,OAAQ,KALhB,mBAUA,uBACIvC,KAAK,OACLwC,KAAK,QACLpC,GAAG,QACHD,MAAOL,EAAMG,KAAKC,MAClBuC,aAAa,MACbC,YAAY,kCACZC,SAAU,SAACC,GAAD,OACNf,EAAS,CACL7B,KAAM,eACNG,MAAOyC,EAAEC,OAAO1C,WAI3BL,EAAMG,KAAKQ,OACR,cAACqC,EAAA,EAAD,CACI5C,MAAM,eACN6C,QAAS,kBAAMlB,EAAS,CAAE7B,KAAM,kBAFpC,SAII,cAACgD,EAAA,EAAD,MAGJ,cAACF,EAAA,EAAD,CACI5C,MAAM,cACN6C,QAAS,WACLlB,EAAS,CAAE7B,KAAM,iBACjB6B,EAAS,CAAE7B,KAAM,WAJzB,SAOI,cAAC,IAAD,SAIZ,cAAC,EAAD,CAAiBiD,IAAKhB,EAAtB,SACKnC,EAAMa,SAASC,KAAI,SAACsC,GACjB,OACI,sBAEId,MAAO,CACHe,eAAgBD,EAAKlC,SACf,eACA,MALd,UAQI,oBACI+B,QAAS,SAACH,GACNQ,QAAQC,IAAIT,GACZf,EAAS,CACL7B,KAAM,iBACNI,GAAI8C,EAAK9C,MALrB,SASK8C,EAAKhD,QAEV,cAAC4C,EAAA,EAAD,CACAQ,UAAU,WACNpD,MAAM,YACN6C,QAAS,kBACLlB,EAAS,CACL7B,KAAM,WACNI,GAAI8C,EAAK9C,GACTD,MAAO+C,EAAKhD,SAPxB,SAWI,cAAC8C,EAAA,EAAD,MAEJ,cAACF,EAAA,EAAD,CACI5C,MAAM,cACN6C,QAAS,kBACLlB,EAAS,CACL7B,KAAM,aACNI,GAAI8C,EAAK9C,MALrB,SASI,cAAC,IAAD,QAxCC8C,EAAK9C,gBCxF3BmD,EAJH,WACR,OAAO,cAAC,EAAD,KC2DIC,EA7DKC,YAAH,k0CCGjBC,IAASC,OACL,qCACI,cAAC,EAAD,IACA,cAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.b9088b76.chunk.js","sourcesContent":["export default function reducer(state, action) {\r\n    if (action.type === 'handleChange') {\r\n        return {\r\n            ...state,\r\n            todo: { ...state.todo, title: action.value },\r\n        };\r\n    }\r\n    if (action.type === 'generateTodo') {\r\n        let id = new Date().getTime().toString();\r\n        let state_todo = { ...state.todo, id };\r\n        if (!state.todo.title) {\r\n            return { ...state };\r\n        } else if (state.todo.title && state.todo.isEdit) {\r\n            let new_todo_arr = state.todo_arr.map((element) => {\r\n                if (element.id === state.todo.id) {\r\n                    return {\r\n                        ...element,\r\n                        title: state.todo.title,\r\n                    };\r\n                } else {\r\n                    return { ...element };\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                todo: { ...state.todo, isEdit: false, title: '' },\r\n                todo_arr: new_todo_arr,\r\n            };\r\n        }\r\n        return {\r\n            ...state,\r\n            todo_arr: [state_todo, ...state.todo_arr],\r\n        };\r\n    }\r\n    if (action.type === 'empty') {\r\n        let name = '';\r\n        return {\r\n            ...state,\r\n            todo: { ...state.todo, title: name },\r\n        };\r\n    }\r\n    if (action.type === 'deleteTodo') {\r\n        let new_todo = state.todo_arr.filter((todo) => {\r\n            return todo.id !== action.id;\r\n        });\r\n        return {\r\n            ...state,\r\n            todo_arr: new_todo,\r\n        };\r\n    }\r\n    if (action.type === 'toggleComplete') {\r\n        let new_todo_arr = state.todo_arr.map((todo) => {\r\n            if (todo.id === action.id) {\r\n                return {\r\n                    ...todo,\r\n                    complete: !todo.complete,\r\n                };\r\n            } else {\r\n                return { ...todo };\r\n            }\r\n        });\r\n        return {\r\n            ...state,\r\n            todo_arr: new_todo_arr,\r\n        };\r\n    }\r\n    if (action.type === 'editTodo') {\r\n        let new_title = action.value;\r\n        if (state.todo.title) {\r\n            return {\r\n                ...state,\r\n                todo: { ...state.todo, title: '' ,isEdit:false},\r\n            };\r\n        }\r\n        return {\r\n            ...state,\r\n            todo: {\r\n                ...state.todo,\r\n                title: new_title,\r\n                isEdit: true,\r\n                id: action.id,\r\n            },\r\n        };\r\n    }\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst TodoGeneratorClass = styled.section`\r\n    width: clamp(30rem, 60rem, 60vw);\r\n    margin: 3rem auto;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    & label {\r\n        visibility:hidden;\r\n    }\r\n    & input {\r\n        background: var(--input-bg-clr);\r\n        font-size: clamp(1.6rem, 2.5rem, 2.8vw);\r\n        flex: 1;\r\n        font-weight: 200;\r\n        letter-spacing: 0.1rem;\r\n        text-align: center;\r\n        border-radius: 0.3rem;\r\n        padding: 0.2rem 0;\r\n        height: clamp(3rem, 3.8rem, 4vw);\r\n        transition: 0.25s;\r\n        &:focus-within {\r\n            background: var(--focused-input-bg-clr);\r\n            box-shadow: 0.5rem 0.5rem 1rem rgba(0, 0, 0, 0.5);\r\n        }\r\n    }\r\n    & button {\r\n        background: var(--create-btn-bg-clr);\r\n        height: clamp(3rem, 3.8rem, 4vw);\r\n        margin-left: 0.5rem;\r\n        transition: 0.25s;\r\n        box-shadow: 0.2rem 0.2rem 1rem rgba(0, 0, 0, 0.1);\r\n        & svg {\r\n            font-size: clamp(2rem, 3rem, 4vw);\r\n        }\r\n        &:hover {\r\n            transform: scale(1.15);\r\n            box-shadow: 0.5rem 0.5rem 1rem rgba(0, 0, 0, 0.2);\r\n            color: var(--create-btn-bg-clr);\r\n            background: var(--create-btn-hover-bg-clr);\r\n        }\r\n    }\r\n`;\r\n\r\nexport default TodoGeneratorClass;\r\n","import styled from 'styled-components';\r\n\r\nconst TodoOutputClass = styled.section`\r\n    width: clamp(40rem, 40vw, 60rem);\r\n    margin: 0 auto;\r\n    & div {\r\n        /* border: 1px solid red; */\r\n        display: flex;\r\n        transition: 0.25s;\r\n        color: var(--main-h1-clr);\r\n        margin: 1rem;\r\n        &:hover {\r\n            transform: scale(1.1);\r\n        }\r\n        &:hover h2,\r\n        &:hover button {\r\n            box-shadow: 0.5rem 0.5rem 1rem rgba(0, 0, 0, 0.2);\r\n        }\r\n        & h2 {\r\n            box-shadow: 0.2rem 0.2rem 1rem rgba(0, 0, 0, 0.2);\r\n            flex: 1;\r\n            background: var(--todo-list-bg-clr);\r\n            border-radius: 0.3rem;\r\n            height: clamp(3rem, 3.8rem, 4vw);\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            color: var(--main-h1-clr);\r\n            font-weight: normal;\r\n            font-size: clamp(1.8rem, 2rem, 3vw);\r\n        }\r\n        & .edit-btn{\r\n            background:var(--create-btn-bg-clr);\r\n            &:hover{\r\n                color:var(--create-btn-bg-clr);\r\n            }\r\n        }\r\n        & button {\r\n            margin-left: 0.3rem;\r\n            box-shadow: 0.2rem 0.2rem 1rem rgba(0, 0, 0, 0.1);\r\n            background: var(--delete-btn-clr);\r\n            & svg {\r\n                font-size: clamp(1.5rem, 2rem, 4vw);\r\n            }\r\n            &:hover {\r\n                color: var(--delete-btn-hover-clr);\r\n                background: var(--create-btn-hover-bg-clr);\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default TodoOutputClass;\r\n","import React, { useEffect, useReducer, useRef } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Add from '@material-ui/icons/Add';\r\nimport Delete from '@material-ui/icons/Delete';\r\n// import Tooltip from '@material-ui/core/Tooltip';\r\n// import CheckBox from '@material-ui/core/Checkbox';\r\n// import CheckBox from '@material-ui/icons/Check';\r\n\r\nimport reducer from './reducer';\r\nimport TodoGeneratorClass from '../StyleComp/TodoGeneratorClass';\r\nimport TodoOutputClass from '../StyleComp/TodoOutputClass';\r\nimport { Edit } from '@material-ui/icons';\r\n\r\nfunction SAVE_TO_LOCAL_STORAGE() {\r\n    let todos;\r\n    if (localStorage.getItem('todo')) {\r\n        return (todos = JSON.parse(localStorage.getItem('todo')));\r\n    } else {\r\n        return (todos = []);\r\n    }\r\n}\r\n\r\nconst default_state = {\r\n    todo: {\r\n        id: '',\r\n        title: '',\r\n        complete: false,\r\n        isEdit: false,\r\n    },\r\n    todo_arr: SAVE_TO_LOCAL_STORAGE(),\r\n};\r\n\r\nconst Todo = () => {\r\n    const [state, dispatch] = useReducer(reducer, default_state);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todo', JSON.stringify(state.todo_arr));\r\n    }, [state.todo_arr]);\r\n\r\n    const todo_text = useRef(null);\r\n\r\n    return (\r\n        <>\r\n            <header>\r\n                <h1>Simple Todo App</h1>\r\n            </header>\r\n            <main>\r\n                <TodoGeneratorClass>\r\n                    <label\r\n                        htmlFor=\"input\"\r\n                        style={{\r\n                            visibility: 'hidden',\r\n                            width: '0',\r\n                            height: '0',\r\n                        }}\r\n                    >\r\n                        input\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"title\"\r\n                        id=\"input\"\r\n                        value={state.todo.title}\r\n                        autoComplete=\"off\"\r\n                        placeholder=\"make a new todo... ✏️\"\r\n                        onChange={(e) =>\r\n                            dispatch({\r\n                                type: 'handleChange',\r\n                                value: e.target.value,\r\n                            })\r\n                        }\r\n                    />\r\n                    {state.todo.isEdit ? (\r\n                        <Button\r\n                            title=\"save changes\"\r\n                            onClick={() => dispatch({ type: 'generateTodo' })}\r\n                        >\r\n                            <Edit />\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            title=\"create todo\"\r\n                            onClick={() => {\r\n                                dispatch({ type: 'generateTodo' });\r\n                                dispatch({ type: 'empty' });\r\n                            }}\r\n                        >\r\n                            <Add />\r\n                        </Button>\r\n                    )}\r\n                </TodoGeneratorClass>\r\n                <TodoOutputClass ref={todo_text}>\r\n                    {state.todo_arr.map((list) => {\r\n                        return (\r\n                            <div\r\n                                key={list.id}\r\n                                style={{\r\n                                    textDecoration: list.complete\r\n                                        ? 'line-through'\r\n                                        : null,\r\n                                }}\r\n                            >\r\n                                <h2\r\n                                    onClick={(e) => {\r\n                                        console.log(e);\r\n                                        dispatch({\r\n                                            type: 'toggleComplete',\r\n                                            id: list.id,\r\n                                        });\r\n                                    }}\r\n                                >\r\n                                    {list.title}\r\n                                </h2>\r\n                                <Button\r\n                                className='edit-btn'\r\n                                    title=\"edit todo\"\r\n                                    onClick={() =>\r\n                                        dispatch({\r\n                                            type: 'editTodo',\r\n                                            id: list.id,\r\n                                            value: list.title,\r\n                                        })\r\n                                    }\r\n                                >\r\n                                    <Edit />\r\n                                </Button>\r\n                                <Button\r\n                                    title=\"delete todo\"\r\n                                    onClick={() =>\r\n                                        dispatch({\r\n                                            type: 'deleteTodo',\r\n                                            id: list.id,\r\n                                        })\r\n                                    }\r\n                                >\r\n                                    <Delete />\r\n                                </Button>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </TodoOutputClass>\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\nimport Todo from './Todo';\r\n\r\nconst App = () => {\r\n    return <Todo />;\r\n};\r\n\r\nexport default App;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n*{\r\n    margin:0;\r\n    padding:0;\r\n    box-sizing:border-box;\r\n    border:none;\r\n    outline:none;\r\n}\r\nhtml{\r\n    font-size:62.5%;\r\n    font-family:sans-serif;\r\n}\r\nbody{\r\n    height:100vh;\r\n    width:90vw;\r\n    margin:0 auto;\r\n    /* background-size:cover;\r\n    background-position:center center;\r\n    background-repeat:no-repeat; */\r\n}\r\n\r\n:root{\r\n    --main-h1-clr:rgb(12, 11, 11);\r\n    --main-h1-before-bg-clr:rgb(62,203,238);\r\n    --body-bg-clr:rgb(206, 229, 245);\r\n\r\n    --input-bg-clr:rgb(255, 255, 255);\r\n    --focused-input-bg-clr:rgb(20,200,200);\r\n    --create-btn-bg-clr:rgb(25, 204, 79);\r\n    --create-btn-hover-bg-clr:rgb(255, 255, 255);\r\n\r\n    /* --todo-list-bg-clr:rgb(243, 83, 34); */\r\n    --todo-list-bg-clr:rgb(20, 200, 200);\r\n    --delete-btn-clr:rgb(250, 40, 40);\r\n    --delete-btn-hover-clr:rgb(245, 19, 19);\r\n}\r\nh1{\r\n    text-align:left;\r\n    display:inline-block;\r\n    position:relative;\r\n    margin-top:1rem;\r\n    font-weight:200;\r\n    letter-spacing:0.1rem;\r\n    font-size:clamp(1.8rem,2.8rem,2.8vw);\r\n    color:var(--main-h1-clr);\r\n\r\n     ::before{\r\n        content:'';\r\n        position:absolute;\r\n        height:0.2rem;\r\n        width:80%;\r\n        background:var(--main-h1-before-bg-clr);\r\n        bottom:-30%;\r\n        left:10%;\r\n    }\r\n}\r\n.active{\r\n    text-decoration:line-through;\r\n}\r\n\r\n`;\r\nexport default GlobalStyle;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './Comps/App';\r\nimport GlobalStyle from './StyleComp/GlobelStyle';\r\n\r\nReactDOM.render(\r\n    <>\r\n        <GlobalStyle />\r\n        <App />\r\n    </>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}